# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '4.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import cv2, imutils
import numpy as np

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 1200)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setMinimumSize(QtCore.QSize(131, 30))
        self.pushButton_2.setMaximumSize(QtCore.QSize(131, 30))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light SemiCondensed")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setMinimumSize(QtCore.QSize(131, 30))
        self.pushButton.setMaximumSize(QtCore.QSize(131, 30))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light SemiCondensed")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.originalImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.originalImageLabel.setMinimumSize(QtCore.QSize(100, 200))
        self.originalImageLabel.setMaximumSize(QtCore.QSize(100000, 100000))
        self.originalImageLabel.setText("")
        self.originalImageLabel.setPixmap(QtGui.QPixmap("Pics/R.jpg"))
        self.originalImageLabel.setScaledContents(True)
        self.originalImageLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.originalImageLabel.setObjectName("originalImageLabel")
        self.horizontalLayout_2.addWidget(self.originalImageLabel)
        self.transformedImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.transformedImageLabel.setMinimumSize(QtCore.QSize(100, 200))
        self.transformedImageLabel.setMaximumSize(QtCore.QSize(100000, 100000))
        self.transformedImageLabel.setText("")
        self.transformedImageLabel.setPixmap(QtGui.QPixmap("Pics/R.jpg"))
        self.transformedImageLabel.setScaledContents(True)
        self.transformedImageLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.transformedImageLabel.setObjectName("originalImageLabel_2")
        self.horizontalLayout_2.addWidget(self.transformedImageLabel)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setMinimumSize(QtCore.QSize(150, 15))
        self.label_5.setMaximumSize(QtCore.QSize(150, 15))
        self.label_5.setObjectName("label_5")
        self.verticalLayout_3.addWidget(self.label_5)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setMinimumSize(QtCore.QSize(200, 30))
        self.comboBox.setMaximumSize(QtCore.QSize(200, 30))
        self.comboBox.setMouseTracking(True)
        self.comboBox.setCurrentText("")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.setItemText(0, "")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("Median filter")
        self.comboBox.addItem("Barrel distortion")
        self.verticalLayout_3.addWidget(self.comboBox)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setMinimumSize(QtCore.QSize(200, 15))
        self.label_2.setMaximumSize(QtCore.QSize(200, 15))
        self.label_2.setObjectName("label_2")
        self.label_2.setVisible(False)
        self.verticalLayout_2.addWidget(self.label_2)
        self.horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider.setMinimumSize(QtCore.QSize(200, 15))
        self.horizontalSlider.setMaximumSize(QtCore.QSize(200, 15))
        self.horizontalSlider.setMouseTracking(False)
        self.horizontalSlider.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.horizontalSlider.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.horizontalSlider.setMaximum(99)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setVisible(False)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_2.addWidget(self.horizontalSlider)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setMinimumSize(QtCore.QSize(200, 15))
        self.label_3.setMaximumSize(QtCore.QSize(200, 15))
        self.label_3.setObjectName("label_3")
        self.label_3.setVisible(False)
        self.verticalLayout_2.addWidget(self.label_3)
        self.horizontalSlider_2 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_2.setMinimumSize(QtCore.QSize(200, 15))
        self.horizontalSlider_2.setMaximumSize(QtCore.QSize(200, 15))
        self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.horizontalSlider_2.setVisible(False)
        self.verticalLayout_2.addWidget(self.horizontalSlider_2)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setMinimumSize(QtCore.QSize(200, 15))
        self.label_4.setMaximumSize(QtCore.QSize(200, 15))
        self.label_4.setObjectName("label_4")
        self.label_4.setVisible(False)
        self.verticalLayout_2.addWidget(self.label_4)
        self.horizontalSlider_3 = QtWidgets.QSlider(self.centralwidget)
        self.horizontalSlider_3.setMinimumSize(QtCore.QSize(200, 15))
        self.horizontalSlider_3.setMaximumSize(QtCore.QSize(200, 15))
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.horizontalSlider_3.setVisible(False)
        self.verticalLayout_2.addWidget(self.horizontalSlider_3)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.gridLayout.addLayout(self.verticalLayout_3, 0, 1, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_2.clicked.connect(self.loadImage)
        self.pushButton.clicked.connect(self.savePhoto)
        self.comboBox.currentTextChanged.connect(self.updateUI)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Initializing values
        self.filename = None # Will hold the image address location
        self.tmp = None # Will hold the temporary image for display
        self.brightness_value_now = 0 # Updated brightness value
        self.median_filter_value_now = 0  # Updated median filter value
        self.hue_value_now = 0  # Updated color rotation hue value
        self.sat_value_now = 0  # Updated color rotation saturation value
        self.value_value_now = 0  # Updated color rotation value value
        self.barrel_distortion_value_now = 0  # Updated barrel distortion value

        
    def loadImage(self):
        #This function will load the user selected image and set it to label using the setOriginalImage() function
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        self.image = cv2.imread(self.filename)
        self.setOriginalImage(self.image)

    def setOriginalImage(self, image):
        image = imutils.resize(image, width=320)  # Adjust the width as needed
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.originalImageLabel.setPixmap(QtGui.QPixmap.fromImage(image))

    def setTransformedImage(self, image):
        self.transformedImageLabel.clear()
        self.tmp = image
        image = imutils.resize(image, width=320)  # Adjust the width as needed
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        pixmap = QtGui.QPixmap.fromImage(image)
        self.transformedImageLabel.setPixmap(pixmap)
        

    # Brightness transformation
    def brightness_value(self,value):
        """ This function will take value from the slider
            for the brightness from 0 to 99
        """
        self.brightness_value_now = value
        print('Brightness: ',value)
        self.updateImg()
    
    def changeBrightness(self,img,value):
        """ This function will take an image (img) and the brightness
            value. It will perform the brightness change using OpenCv
            and after split, will merge the img and return it.
        """
        hsv = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
        h,s,v = cv2.split(hsv)
        lim = 255 - value
        v[v>lim] = 255
        v[v<=lim] += value
        final_hsv = cv2.merge((h,s,v))
        img = cv2.cvtColor(final_hsv,cv2.COLOR_HSV2BGR)
        return img
    
    # Median filter transformation
    def median_filter_value(self, value):
        """ This function will take value from the median filter slider from 0 to 20 """
        self.median_filter_value_now = value
        print('Median Filter:', self.median_filter_value_now)
        self.updateImg()

    def applyMedianFilter(self, img, value):
        """ This function will apply a median filter to the image with a kernel size of 5x5 """
        if value > 0:
            kernel_size = (2 * value) + 1  # Calculate kernel size based on the slider value
            img = cv2.medianBlur(img, kernel_size)
            
        return img
    
   # HSV transformation - Rotating colors on the HSV color scale,  
    def hue_value(self, value):
            """ This function will take value from the color rotation slider from -180 to 180 """
            self.hue_value_now = value
            print('Hue - Color Rotation:', self.hue_value_now)
            self.updateImg()

    def sat_value(self, value):
            """ This function will take value from the color rotation slider from -180 to 180 """
            self.sat_value_now = value
            print('Saturation - Color Rotation:', self.sat_value_now)
            self.updateImg()

    def value_value(self, value):
            """ This function will take value from the color rotation slider from -180 to 180 """
            self.value_value_now = value
            print('Value - Color Rotation :', self.value_value_now)
            self.updateImg()

    def rotateColors(self, img, hue, sat, value):
            """ This function will rotate colors on the HSV scale """
            hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
            h, s, v = cv2.split(hsv)
            h = (h + hue)   # Rotate hue values
            s = (s + sat)
            v = (v + value)
            rotated_hsv = cv2.merge((h, s, v))
            rotated_img = cv2.cvtColor(rotated_hsv, cv2.COLOR_HSV2BGR)
            return rotated_img
    
    # Barrel distortion transformation
    
    def barrel_distortion_value(self, value):
            """ This function will take value from the barrel distortion slider from -100 to 100 """
            self.barrel_distortion_value_now = value
            print('Barrel Distortion:', self.barrel_distortion_value_now)
            self.updateImg()

    def applyBarrelDistortion(self, img, value):
            """ This function will apply barrel distortion to the image """
            distorted_img = img.copy()
            height, width = img.shape[:2]
            k = value / 100.0  # Adjust the distortion factor as needed
            cx, cy = width / 2, height / 2

            for y in range(height):
                for x in range(width):
                    r = ((x - cx) / width) ** 2 + ((y - cy) / height) ** 2
                    x_distorted = int((x - cx) * (1 + k * r) + cx)
                    y_distorted = int((y - cy) * (1 + k * r) + cy)

                    if 0 <= x_distorted < width and 0 <= y_distorted < height:
                        distorted_img[y, x] = img[y_distorted, x_distorted]
            

            return distorted_img


    # Connecting and disconnecting sliders

    def brightnessConnection(self):
         self.horizontalSlider.valueChanged.disconnect()
         self.horizontalSlider.valueChanged['int'].connect(self.brightness_value) 
    
    def MedianConnection(self):
         self.horizontalSlider.valueChanged.disconnect()
         self.horizontalSlider.valueChanged['int'].connect(self.median_filter_value) 
    
    def HSVConnection(self):
         self.horizontalSlider.valueChanged.disconnect()
         self.horizontalSlider_2.valueChanged.disconnect()
         self.horizontalSlider_3.valueChanged.disconnect()

         self.horizontalSlider.valueChanged['int'].connect(self.hue_value) 
         self.horizontalSlider_2.valueChanged['int'].connect(self.sat_value)
         self.horizontalSlider_3.valueChanged['int'].connect(self.value_value)
    
    def BarrelConnection(self):
         self.horizontalSlider.valueChanged.disconnect()
         self.horizontalSlider.valueChanged['int'].connect(self.barrel_distortion_value) 
         
 # Updating the UI

    def updateUI(self):
        selected_filter = self.comboBox.currentText()
        # Reset sliders to their default positions 
        self.horizontalSlider.setValue(0)
        self.horizontalSlider_2.setValue(0)
        self.horizontalSlider_3.setValue(0)
        #Initialize the sliders' connection in order to disconnect it later
        self.horizontalSlider.valueChanged['int'].connect(self.brightness_value)
        self.horizontalSlider_2.valueChanged['int'].connect(self.brightness_value)
        self.horizontalSlider_3.valueChanged['int'].connect(self.brightness_value)

        # Set the visibility of sliders and labels based on the selected filter
        if selected_filter == "Brightness":
            #displaying the sliders of interest
            self.horizontalSlider.setVisible(True)
            self.label_2.setVisible(True)
            self.label_2.setText("Brightness")
            # Hide other sliders
            self.horizontalSlider_2.setVisible(False)
            self.label_3.setVisible(False)
            self.label_3.setText("")
            self.horizontalSlider_3.setVisible(False)
            self.label_4.setVisible(False)
            self.label_4.setText("")            
            self.brightnessConnection()


        elif selected_filter == "Median filter":
            self.horizontalSlider.setVisible(True)
            self.label_2.setVisible(True)
            self.label_2.setText("Median filter")
            # Hide other sliders
            self.horizontalSlider_2.setVisible(False)
            self.horizontalSlider_3.setVisible(False)
            self.label_3.setVisible(False)
            self.label_4.setVisible(False)
            self.MedianConnection()
        
        elif selected_filter == "HSV color rotation":

            self.horizontalSlider.setVisible(True)
            self.label_2.setVisible(True)
            self.label_2.setText("Hue")
            self.horizontalSlider_2.setVisible(True)
            self.label_3.setVisible(True)
            self.label_3.setText("Saturation")
            self.horizontalSlider_3.setVisible(True)
            self.label_4.setVisible(True)
            self.label_4.setText("Value")
            self.HSVConnection()
  
        elif selected_filter == "Barrel distortion":
            self.horizontalSlider.setVisible(True)
            self.label_2.setVisible(True)
            self.label_2.setText("Barrel distortion")
            # Hide other sliders
            self.horizontalSlider_2.setVisible(False)
            self.horizontalSlider_3.setVisible(False)
            self.label_3.setVisible(False)
            self.label_4.setVisible(False)
            self.BarrelConnection()
    
    def updateImg(self):
        #This function will update the photo according to the current transformation values
        img = self.changeBrightness(self.image, self.brightness_value_now)
        img = self.rotateColors(img, self.hue_value_now, self.sat_value_now, self.value_value_now)
        img = self.applyBarrelDistortion(img, self.barrel_distortion_value_now)
        img = self.applyMedianFilter(img, self.median_filter_value_now)

        self.setTransformedImage(img)
        return img

    def savePhoto(self):
        #This function will save the image
        
        filename = QFileDialog.getSaveFileName(filter="JPG(*.jpg);;PNG(*.png);;TIFF(*.tiff);;BMP(*.bmp)")[0]
        
        cv2.imwrite(filename, self.updateImg())
        print('Image saved as:',filename)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Display Application"))
        self.pushButton_2.setText(_translate("MainWindow", "Open"))
        self.pushButton.setText(_translate("MainWindow", "Save"))
        self.label_5.setText(_translate("MainWindow", "Select a filter..."))
        self.comboBox.setCurrentText(_translate("MainWindow", ""))
        self.comboBox.setItemText(0, _translate("MainWindow", ""))
        self.comboBox.setItemText(1, _translate("MainWindow", "Brightness"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Median filter"))
        self.comboBox.setItemText(3, _translate("MainWindow", "HSV color rotation"))
        self.comboBox.setItemText(4, _translate("MainWindow", "Barrel distortion"))
        self.label_2.setText(_translate("MainWindow", "TextLabel"))
        self.label_3.setText(_translate("MainWindow", "TextLabel"))
        self.label_4.setText(_translate("MainWindow", "TextLabel"))
    


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
